/*
 * Copyright (C) 2015 likhachev
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
package com.ivli.roim.controls;

import com.ivli.roim.core.Filter;
import javax.swing.table.AbstractTableModel;

import com.ivli.roim.core.Measurement;
import javax.swing.SwingUtilities;

/**
 *
 * @author likhachev
 */
public class AnnotationPanel extends javax.swing.JPanel {
    Object rowData[][];// = new Object[str.length][2];
    /*{ { "1", Boolean.FALSE }, 
                               { "2", Boolean.FALSE }, 
                               { "3", Boolean.FALSE },
                               { "4", Boolean.FALSE }, 
                               { "5", Boolean.FALSE }, 
                             };
        */
        
    final String columnNames[] = {"NAME", 
                                "DISPLAY"};
    
    class PropertyTableModel extends AbstractTableModel {
        public int getColumnCount() {
          return columnNames.length;
        }

        public String getColumnName(int column) {
          return columnNames[column];
        }

        public int getRowCount() {
          return rowData.length;
        }

        public Object getValueAt(int row, int column) {
          return rowData[row][column];
        }

        public Class getColumnClass(int column) {
          return (getValueAt(0, column).getClass());
        }

        public void setValueAt(Object value, int row, int column) {
            rowData[row][column] = value;
        }

        public boolean isCellEditable(int row, int column) {
          return (column != 0);
        }
    }    
    
    
   final String[] str = Measurement.getAllMeasurements();

   final com.ivli.roim.Annotation iAnno;
    /**
     * Creates new form AnnotationPanel
     */
    public AnnotationPanel(com.ivli.roim.Annotation anA) {
        iAnno = anA;
        rowData = new Object[str.length][2];
                
        ///com.ivli.roim.core.Filter [] fs = anA.getFilters();
        for(int n=0; n < str.length; ++n ) {
            rowData[n][0] = str[n];
            rowData[n][1] = false;
            
            for (com.ivli.roim.core.Filter f : iAnno.getFilters())
                if (f.getMeasurement().getName() == str[n]) {
                    rowData[n][1] = true;
                    break;
                }            
        }
        
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jCheckBox1 = new javax.swing.JCheckBox();

        jTable1.setModel(new PropertyTableModel());
        jScrollPane1.setViewportView(jTable1);

        jButton1.setText("OK");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jCheckBox1.setText("MULTILINE");
        jCheckBox1.setSelected(iAnno.isMultiline());
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jCheckBox1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(83, 83, 83))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jCheckBox1))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
        java.util.ArrayList<com.ivli.roim.core.Filter> f = new java.util.ArrayList<>();
        
        int cnt = 0;
        for(int n=0; n < jTable1.getRowCount(); ++n ) {          
            if (true == (boolean)jTable1.getModel().getValueAt(n, 1)) 
                cnt++;//f.add(Filter.getFilter((String)rowData[n][0]));
        }
        
        com.ivli.roim.core.Filter []fi = new com.ivli.roim.core.Filter[cnt];
        
        for(int n=0; n < jTable1.getRowCount(); ++n ) {
            if (true == (boolean)jTable1.getModel().getValueAt(n, 1))
                fi[n] = Filter.getFilter((String)rowData[n][0]);
        }
              
        iAnno.setFilters(fi);
        iAnno.setMultiline(jCheckBox1.isSelected());
        SwingUtilities.getWindowAncestor(this).setVisible(false);        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
